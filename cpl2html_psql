#!/usr/bin/python3

import tempfile
import subprocess
import os.path
import sys
import string
import shutil
import urllib.parse
import json

url_safe_characters = string.ascii_letters + string.digits + '.~_-'

import argparse
parser = argparse.ArgumentParser(description='converts copal templates into HTML files')
parser.add_argument('files', metavar='FILE', nargs='+', help='Copal files to be processed. TODO: support >1.')
#parser.add_argument('-o','--output', dest='output', default=None,
#	help='Output file for generated document. If not provided, will output to FILE.html where FILE is the first input file.')
parser.add_argument('-s','--source', action='append', help="Additional sourcefiles to include.", default=[])
parser.add_argument('-p','--request_path', help='Request path (like "/path/to/some.api?a=b") to pretend was requested.')
args = parser.parse_args()

with tempfile.TemporaryDirectory() as compile_dir:
	if len(args.files):
		input_file = args.files[0]
	else:
		input_file = os.path.join(compile_dir,'tmp.am')
		with open(input_file,'w') as stdin_sink:
			shutil.copyfileobj(sys.stdin,stdin_sink)

	subprocess.check_call(['copal','-o',os.path.join(compile_dir,'html.hh'),'-n','singleton',input_file])
	cc_path = os.path.join(compile_dir,'html.cc')
	with open(cc_path,'w') as cc_file:
		cc_file.write("""#include "html.hh"
#include <iostream>
#include <locale>
#include <map>
#include <pqxx/pqxx>

struct request_context {
	pqxx::transaction<> *p_transaction;
	std::wstring path;
	std::multimap<std::wstring, std::wstring> get;
	std::map<std::string, std::string> session;
};

int main(int argc, char *argv[]) {
	std::locale::global(std::locale("en_US.utf8"));
	std::wcout.imbue(std::locale());
	pqxx::connection db_conn("dbname=rpexpress");
	pqxx::work xact(db_conn, "inline");
	struct request_context ctx = {&xact, L""};
""")
		if args.request_path:
			cc_file.write("	ctx.path = L%s;\n"%json.dumps(args.request_path))
			url_bits = urllib.parse.urlparse(args.request_path)
			for k, v in urllib.parse.parse_qsl(url_bits.query):
				cc_file.write("	ctx.get[L%s] = L%s;\n"%(json.dumps(k), json.dumps(v)))

		cc_file.write("""	std::map<std::string, std::string> headers; //unused
	auto params = copal::singleton::gen_headers(ctx, headers);
	copal::singleton::gen_html(std::wcout, params);
	return 0;
}
""")
	bin_path = os.path.join(compile_dir,'gen_html')
	subprocess.check_call(['g++','-std=c++1y','-lpqxx','-I'+os.path.expanduser('~/local/include'),'-I.',cc_path] + [q for q in args.source] + ['-o',bin_path])
	subprocess.check_call(['env','LC_ALL=en_US.utf8',bin_path])

