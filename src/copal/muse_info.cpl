<{{
#include <cwajh.hh>
#include <string>
#include <vector>
#include <utility>
#include <regex>
#include <path_info.hh>

#include "db/rpexpress.hh"
#include "db/rpexpress.odb.hh"

GEN_HEADERS
	using namespace std;
	struct {
		bool found;
		db::muse muse;
		vector<db::trait> major_traits;
		vector<db::trait> minor_traits;
		db::artwork current_image;
		bool has_prev_img;
		bool has_next_img;
		// From query args.
		long image_index;
	} muse_info;

	auto txn = env.p_odb->begin();

	{
		typedef odb::query<db::muse> q_muse;
		auto result = env.p_odb->template query<db::muse>(q_muse::username == muse_for_path(env.path));
		if(result.empty()) {
			headers["Status"] = "404 Not Found";
			result.found = false;
			return muse_info;
		}
		if(result.size() > 1) {
			//TODO(cwajh): assert log
		}
		result.found = true;
		muse_info.muse = *(result.begin());
	}
	{
		typedef odb::query<db::trait> q_trait;
		auto result = env.p_odb->template query<db::trait>(q_trait::character == muse_info.muse);
		for(auto &trait : result) {
			if(trait->category == db::major) {
				muse_info.major_traits.push_back(trait);
			} else if (trait->category == db::minor) {
				muse_info.minor_traits.push_back(trait);
			} else {
				//TODO(cwajh): assert log
			}
		}
	}
	
	auto img_param = env.get.find(L"img");
	if (img_param == env.get.end()) {
		muse_info.image_index = 0;
	} else {
		muse_info.image_index = stol(img_param->second);
		if (muse_info.image_index < 0) {
			muse_info.image_index = 0;
		}
	}
	muse_info.has_prev_img = muse_info.image_index > 0;
	
	{
		typedef odb::query<db::artwork> q_art;
		auto result = env.p_odb->template query<db::artwork>(
			q_art::subject == muse_info.muse &&
			q_art::position == muse_info.image_index +
			"ORDER BY" + q_art::position);
		
		muse_info.has_next_img = muse_info.image_index < (result.size()-1);
		int curr_idx = 0;
		for(db::artwork &artwork : result) {
			if(curr_idx == muse_info.image_index) {
				muse_info.current_image = artwork;
			} else {
				curr_idx++;
			}
		}
	}

	return muse_info;
END_GEN_HEADERS

}}>
&&	if (!params.muse) {
		<h1 No such character as &{{ params.muse.name }}&... >
&&		return;
&&	}
< html
	< head
		<link(rel='stylesheet' type='text/css' href='/static/theme.css') />
		<title &{{ params.muse.name }}&>
	>
	< body.doc_with_major_pane
		<@include nav_bar params@>
		< div#major_pane

			< h1#muse_name &{{ params.muse.name }}&>
			< div#muse_portraits
				&/* Sorry this section is a mess. 
				  * All three img tags must have zero padding whitespace.
				  * Makes things awkward. */&

				<{{	std::wstring portrait_href(L"?img="); }}>
				<a(href='&{{ params.has_prev_img ? (portrait_href+std::to_wstring(params.image_index-1)) : L"" }}&') <img#prev_portrait_nav(&{{
					params.has_prev_img ? L"src='/static/prev_portrait_btn.png' class='prev_nav nav_enabled' alt='previous image'"
					                    : L"src='/static/prev_portrait_placeholder.png' class='prev_nav nav_disabled'"}}&)
				&/* TODO(cwajh): inline quote escaping for the title thingy? can it be auto from being inside the () block? */&
				/>><img#muse_portrait(src='/static/&{{
					params.current_image.resource->hash + L"." + params.current_image.resource->extension
				}}&' title="&{{
					params.current_image.tooltip
				}}&" alt="&{{
					params.current_image.fallback_text
				}}&")
				/><a(href='&{{ params.has_next_img ? (portrait_href+std::to_wstring(params.image_index+1)) : L"" }}&') <img#next_portrait_nav(&{{
					params.has_next_img ? L"src='/static/next_portrait_btn.png' class='next_nav nav_enabled' alt='next image'"
					                    : L"src='/static/next_portrait_placeholder.png' class='next_nav nav_disabled'"}}&) />>

			>

			<div#muse_profile &{{ params.mun.description }}& >
			<dl.stat_sheet#major_stats
				&&	for (auto trait : params.major_traits) {
				<dt.stat_name &{{ trait.name }}&> <dd.stat_value &{{ trait.value }}&>
				&&	}
			>
		>
		< div#minor_pane
			< dl.stat_sheet#minor_stats
				<{{ for (auto trait : params.minor_traits) { }}>
				<dt.stat_name &{{ trait.name }}&> <dd.stat_value &{{ trait.value }}&>
				<{{ } }}>
			>
		>
	>
>
