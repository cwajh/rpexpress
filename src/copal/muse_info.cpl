<{{
#include <cwajh.hh>
#include <string>
#include <vector>
#include <utility>
#include <regex>
#include <path_info.hh>
#include <set>
#include <user.hh>
#include <next_pkey.hh>

#include "db/rpexpress.hh"
#include "db/rpexpress.odb.hh"

/*
	TODO(cwajh): Post handling logic
	Deletes are their OWN post, but all the other stuff still gets submitted.
	So if you typed some stuff, and then hit DELETE, it will only remove the deleted line, but return you to an editor form with your other changes intact.
	(via continuation, same as in an error case...)
	what about adds? not one at a time, clearly. +1/+5 buttons which reload and increment a GET parameter. again, continuing.
*/
CPL_NAMESPACED

inline bool extract_int_suffix(const std::wstring &str, const std::wstring &prefix, int *out_suffix) {
	if(!has_prefix(str, prefix)) {
		return false;
	}
	std::wstring suffix = str.substr(prefix.length());
	try {
		*out_suffix = stoi(suffix);
		return true;
	} catch (std::invalid_argument e) {
		return false;
	} catch (std::out_of_range e) {
		return false;
	}
	// How do you get here?
	return false;
}

struct continued_traits {
	std::map<int, db::trait> new_majors;
	std::map<int, db::trait> new_minors;
	std::map<db::pkey_t, std::wstring> updated_bodies;
	std::map<std::wstring, std::wstring> fields;
	int add_major_ct;
	int add_minor_ct;
	std::set<db::pkey_t> to_delete;
	bool ok_to_post;
	continued_traits(const std::map<std::wstring, std::wstring> &received_fields) : add_major_ct(0), add_minor_ct(0) {
		for(auto &field : received_fields) {
			int idx = -1;
			if(has_prefix(field.first, L"trait_body_")
				&& is_valid_ll(field.first.substr(11))) {
				updated_bodies[stoll(field.first.substr(11))] = field.second;
			} else if( extract_int_suffix(field.first,  L"new_maj_name_", &idx)) {
				new_majors[idx].position = idx;
				new_majors[idx].name = field.second;
				new_majors[idx].category = db::major;
			} else if( extract_int_suffix(field.first, L"new_min_name_", &idx)) {
				new_minors[idx].position = idx;
				new_minors[idx].name = field.second;
				new_minors[idx].category = db::minor;
			} else if( extract_int_suffix(field.first, L"new_maj_value_", &idx)) {
				new_majors[idx].position = idx;
				new_majors[idx].value.code = w2s(field.second);
				new_majors[idx].category = db::major;
			} else if( extract_int_suffix(field.first, L"new_min_value_", &idx)) {
				new_minors[idx].position = idx;
				new_minors[idx].value.code = w2s(field.second);
				new_minors[idx].category = db::minor;
			} else {
				// one-time changes
				int suffix = -1;
				if( extract_int_suffix(field.first, L"add_majors_", &suffix))  {
					add_major_ct += suffix;
					ok_to_post = false;
				} else if( extract_int_suffix(field.first, L"add_minors_", &suffix)) {
					add_minor_ct += suffix;
					ok_to_post = false;
				} else if( has_prefix(field.first, L"delete_trait_") 
				&& is_valid_ll(field.first.substr(13))) {
					to_delete.insert(stoll(field.first.substr(13)));
					ok_to_post = false;
				}
				continue;
			}
			fields[field.first] = field.second;
		}
	}
	std::wstring continuation_get_params() const {
		std::wstring args(L"mode=edit");
		args += L"&maj_new=" + std::to_wstring(new_majors.size() + add_major_ct);
		args += L"&min_new=" + std::to_wstring(new_minors.size() + add_minor_ct);
		return args;
	}
	
};
CPL_END_NAMESPACED

ON_BAD_POST
	continued_traits traits(fields);
	env.post_outcome.insert(traits.fields.begin(), traits.fields.end());
	return env.path + L'?' + traits.continuation_get_params();
END_BAD_POST

PERFORM_POST
	using namespace std;

	continued_traits traits(fields);
	env.post_outcome.insert(traits.fields.begin(), traits.fields.end());
	wstring retry_path = env.path + L'?' + traits.continuation_get_params();

	odb::core::transaction txn (env.p_odb->begin());
	P<db::mun> user = current_user(env.p_odb, env.session);
	if (!user) {
		// TODO(cwajh): can the login page do a continuation back into a post attempt?
		env.post_error = L"You don't seem to be signed in. Only signed in users can edit muse pages.";
		return retry_path;
	}
	db::muse muse;
	{
		typedef odb::query<db::muse> q_muse;
		auto result = env.p_odb->template query<db::muse>(q_muse::username == muse_for_path(env.path));
		if(result.empty()) {
			env.post_error = L"Tried to update a muse named ";
			env.post_error += muse_for_path(env.path) + L" but there's no such muse?";
			return L""; // TODO(cwajh): a proper "global error" page.
		}
		if(result.size() > 1) {
			//TODO(cwajh): assert log
		}
		muse = *(result.begin());
	}
	if (!muse.owner) {
		env.post_error = L"Muse with ID ";
		env.post_error += std::to_wstring(muse.muse_id) + L" has no owner?";
		return L"";
	}
	if (muse.owner->mun_id != user->mun_id) {
		env.post_error = L"The muse you were trying to edit, named ";
		env.post_error += muse_for_path(env.path) + L", doesn't seem to belong to you.";
		return retry_path;
	}

	// And now, update can finally begin.
	if (traits.ok_to_post){
		int latest_position = 0;
		typedef odb::query<db::trait> q_trait;
		auto result = env.p_odb->template query<db::trait>(
			(q_trait::character == q_trait::_val(muse))
			+ "ORDER BY" + q_trait::position
		);
		for(auto &trait : result) {
			latest_position = trait.position;
			auto post_it = traits.updated_bodies.find(trait.trait_id);
			if (post_it != traits.updated_bodies.end()) {
				try {
					trait.value = bbcode::block(w2s(post_it->second));
				} catch (const bbcode::trace::parse_error &error) {
					env.post_error = L"Problem parsing the BBCode for the `";
					env.post_error += trait.name + L"` trait.";
					env.post_outcome[L"error_annotations"] = s2w(error.what()) + s2w(error.html_annotations);
					return retry_path;
				}
				env.p_odb->update(trait);
				// At the end of the iteration, updated_bodies should be emptied.
				traits.updated_bodies.erase(post_it);
			}
		}
		if(!traits.updated_bodies.empty()) {
			env.post_error = L"Some traits were scheduled to be written but don't exist for this muse.<br/>";
			for(auto &unwritten_trait : traits.updated_bodies)
			{
				env.post_error += std::to_wstring(unwritten_trait.first) + L";";
			}
			txn.rollback();
			return retry_path;
		}
		for (auto &trait : traits.new_majors) {
			trait.second.trait_id = next_pkey();
			trait.second.position = ++latest_position;
			trait.second.character = std::make_shared<db::muse>(muse);
			env.p_odb->persist(trait.second);
		}
		for (auto &trait : traits.new_minors) {
			trait.second.trait_id = next_pkey();
			trait.second.position = ++latest_position;
			trait.second.character = std::make_shared<db::muse>(muse);
			env.p_odb->persist(trait.second);
		}
	}
	txn.commit();
	return env.path; // back to the profile page from whence you came
END_PERFORM_POST

GEN_HEADERS
	using namespace std;
	struct {
		P<db::mun> user;
		wstring path;
		wstring path_with_query;
		bool found = false;
		db::muse muse;
		vector<db::trait> major_traits;
		vector<db::trait> minor_traits;
		vector<db::trait> new_major_traits;
		vector<db::trait> new_minor_traits;
		db::artwork current_image;
		bool has_prev_img = false;
		bool has_next_img = false;
		// From query args.
		long image_index = 0;
		bool editor = false;
		wstring post_error;
	} muse_info;

	odb::core::transaction txn (env.p_odb->begin());

	muse_info.user = current_user(env.p_odb, env.session);
	muse_info.path = env.path;
	muse_info.path_with_query = copal::user_box::path_with_query(env.path, env.get);

	{
		typedef odb::query<db::muse> q_muse;
		auto result = env.p_odb->template query<db::muse>(q_muse::username == muse_for_path(env.path));
		if(result.empty()) {
			headers["Status"] = "404 Not Found";
			muse_info.found = false;
			muse_info.muse.username = muse_for_path(env.path);
			return muse_info;
		}
		if(result.size() > 1) {
			//TODO(cwajh): assert log
		}
		muse_info.found = true;
		muse_info.muse = *(result.begin());
	}	
	{
		typedef odb::query<db::trait> q_trait;
		auto result = env.p_odb->template query<db::trait>(
			(q_trait::character == q_trait::_val(muse_info.muse))
			+ "ORDER BY" + q_trait::position
		);
		for(auto &trait : result) {
			// DO NOT PERSIST THESE; they have dirty data.
			auto saved_trait = env.post_outcome.find(wstring(L"trait_body_") + to_wstring(trait.trait_id));
			if(saved_trait != env.post_outcome.end()) {
				// bypass bbcode validity check. a continuation may be BECAUSE of invalid code!
				trait.value.code = w2s(saved_trait->second);
			}
			if(trait.category == db::major) {
				muse_info.major_traits.push_back(trait);
			} else if (trait.category == db::minor) {
				muse_info.minor_traits.push_back(trait);
			} else {
				//TODO(cwajh): assert log
			}
		}
	}
	int new_trait_ct = 0;
	try {
		new_trait_ct = stoi(env.get[L"maj_new"]);
	} catch (invalid_argument e) {
	} catch (out_of_range e) {
	}
	for(int i=0; i<new_trait_ct; ++i) {
		db::trait new_trait;
		new_trait.name = env.post_outcome[L"new_maj_name_" + to_wstring(i)];
		new_trait.value.code = w2s(env.post_outcome[L"new_maj_value_" + to_wstring(i)]);
		new_trait.position = i;
		muse_info.new_major_traits.push_back(new_trait);
	}
	try {
		new_trait_ct = stoi(env.get[L"min_new"]);
	} catch (invalid_argument e) {
	} catch (out_of_range e) {
	}
	for(int i=0; i<new_trait_ct; ++i) {
		db::trait new_trait;
		new_trait.name = env.post_outcome[L"new_min_name_" + to_wstring(i)];
		new_trait.value.code = w2s(env.post_outcome[L"new_min_value_" + to_wstring(i)]);
		new_trait.position = i;
		muse_info.new_minor_traits.push_back(new_trait);
	}

	muse_info.editor = false;
	auto mode_param = env.get.find(L"mode");
	if (mode_param != env.get.end()) {
		if(mode_param->second == L"edit" && muse_info.found
			&& muse_info.user && muse_info.muse.owner 
			&& muse_info.user->mun_id == muse_info.muse.owner->mun_id) {
			muse_info.editor = true;
		}
	}
	muse_info.post_error = html_entity_escape(env.post_error);
	if(!env.post_outcome[L"error_annotations"].empty()) {
		muse_info.post_error += L"<br/>";
		muse_info.post_error += env.post_outcome[L"error_annotations"];
	}

	auto img_param = env.get.find(L"img");
	if (img_param == env.get.end()) {
		muse_info.image_index = 0;
	} else {
		muse_info.image_index = stol(img_param->second);
		if (muse_info.image_index < 0) {
			muse_info.image_index = 0;
		}
	}
	muse_info.has_prev_img = muse_info.image_index > 0;
	
	{
		typedef odb::query<db::artwork> q_art;
		auto result = env.p_odb->template query<db::artwork>(
			(q_art::subject == q_art::_val(muse_info.muse)) +
			"ORDER BY" + q_art::position);

		if(muse_info.image_index >= (signed long long)result.size()) {
			muse_info.image_index = result.size() - 1;
		}
		muse_info.has_next_img = muse_info.image_index+1 < (int)(result.size());

		int curr_idx = 0;
		for(db::artwork &artwork : result) {
			if(curr_idx == muse_info.image_index) {
				muse_info.current_image = artwork;
				break;
			}
			curr_idx++;
		}
	}

	txn.commit();
	return muse_info;
END_GEN_HEADERS

}}>
&&	if (!params.found) {
		<h1 No such character as &{{ params.muse.username }}&... >
&&		return;
&&	}
< html
	< head
		<link(rel='stylesheet' type='text/css' href='/static/theme.css') />
		<title &{{ params.muse.name }}&>
	>
	< body.doc_with_major_pane
		<@include user_box params@>
		<@include nav_bar params@>
		&& if (params.editor) {
			<form(method='post' action=&'{ params.path }'&) &{{ util.form_tokens(params.path) }}&
			&& if(!params.post_error.empty()) {
				<div.post_error	&{{ params.post_error }}&>
			&& }
		&& }
		< div#major_pane

			< h1#muse_name &{{ params.muse.name }}&>
			< div#muse_portraits
				&/* Sorry this section is a mess. 
				  * All three img tags must have zero padding whitespace.
				  * Makes things awkward. */&

				<{{	std::wstring portrait_href(L"?img="); }}>
				<a(href='&{{ params.has_prev_img ? (portrait_href+std::to_wstring(params.image_index-1)) : L"" }}&') <img#prev_portrait_nav(&{{
					params.has_prev_img ? L"src='/static/prev_portrait_btn.png' class='prev_nav nav_enabled' alt='previous image'"
					                    : L"src='/static/prev_portrait_placeholder.png' class='prev_nav nav_disabled'"}}&)
				/>><img#muse_portrait(src='/static/&{{
					params.current_image.resource->hash + L"." + params.current_image.resource->extension
				}}&' title=&"{
					params.current_image.tooltip
				}"& alt=&"{
					params.current_image.fallback_text
				}"&)
				/><a(href='&{{ params.has_next_img ? (portrait_href+std::to_wstring(params.image_index+1)) : L"" }}&') <img#next_portrait_nav(&{{
					params.has_next_img ? L"src='/static/next_portrait_btn.png' class='next_nav nav_enabled' alt='next image'"
					                    : L"src='/static/next_portrait_placeholder.png' class='next_nav nav_disabled'"}}&) />>

			>

			<div#muse_profile &{{ params.muse.description }}& >
			<dl.stat_sheet#major_stats
				&&	for (auto trait : params.major_traits) {
					&& if (params.editor) {
						<div(style='float:right') Delete >
					&& }
					<dt.stat_name &{{ trait.name }}&> <dd.stat_value 
					&& if (params.editor) {
						<textarea(name='trait_body_&{{trait.trait_id}}&') &{{ trait.value.whtml_escaped_code() }}&>
					&& } else {
						&{{ trait.value.whtml() }}&
					&& }
					>
				&&	}
				&&	if (params.editor) for (auto trait : params.new_major_traits) {
					<dt.stat_name <input(name='new_maj_name_&{{ trait.position }}&' value=&'{ trait.name }'&) /> >
					<dd.stat_value 
						<textarea(name='new_maj_value_&{{trait.position}}&') &{{ trait.value.whtml_escaped_code() }}&>
					>
				&&	}
			>
		>
		< div#minor_pane
			< dl.stat_sheet#minor_stats
				<{{ for (auto trait : params.minor_traits) { }}>
					<dt.stat_name &{{ trait.name }}&> <dd.stat_value 
					&& if (params.editor) {
						<textarea(name='trait_body_&{{trait.trait_id}}&') &{{ trait.value.whtml_escaped_code() }}&>
					&& } else {
						&{{ trait.value.whtml() }}&
					&& }
					>
				<{{ } }}>
				&&	if (params.editor) for (auto trait : params.new_minor_traits) {
					<dt.stat_name <input(name='new_min_name_&{{ trait.position }}&' value=&'{ trait.name }'&) /> >
					<dd.stat_value 
						<textarea(name='new_min_value_&{{trait.position}}&') &{{ trait.value.whtml_escaped_code() }}&>
					>
				&&	}
			>
			&& if (params.editor) {
			<input(type='submit' value='Save Changes') >
			&& }
		>
		&& if (params.editor) {
		>
		&& }
	>
>
