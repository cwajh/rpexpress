<{{
#include <vector>
#include <pqxx/pqxx>
#include "cwajh.hh"

GEN_HEADERS
	struct BabyPhrase {
		std::wstring phrase;
		int64_t index;
	};

	std::vector<BabyPhrase> out_phrases;
	pqxx::result phrase_result = env.p_transaction->exec("select * from test_phrases order by idx");
	for(pqxx::result::size_type i = 0; i < phrase_result.size(); i++) {
		BabyPhrase phrase;

		std::string phrase_utf8;
		phrase_result[i][0].to(phrase_utf8);
		phrase.phrase = s2w(phrase_utf8);

		phrase_result[i][1].to(phrase.index);

		out_phrases.push_back(phrase);
	}
	auto p_visit_count = env.session.find("visit_count");
	int visit_count = 0;
	if (p_visit_count != env.session.end()) {
		try {
			visit_count = std::stoi(p_visit_count->second);
		} catch (const std::invalid_argument&) {}
	}
	visit_count++;
	env.session["visit_count"] = std::to_string(visit_count);
	out_phrases.push_back({std::wstring(L"This is visit number ") + std::to_wstring(visit_count), 99});
	return out_phrases;
END_GEN_HEADERS
}}>

< head
	< title Fourteen phrases to keep in mind. >
>
< body
	< ul
	&& for (auto item : params) {
		< li &{{ item.phrase }}& >
	&& }
	>
>

